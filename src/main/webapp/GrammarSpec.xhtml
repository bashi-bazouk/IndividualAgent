<lift:surround with="default" at="content">
<div align="center">
<h1>The Language specialK</h1>
<h2>BNF Converter</h2>
</div>

<p>
This document was automatically generated by the <i>BNF-Converter</i>. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).
</p>
<h2>The lexical structure of specialK</h2>
<h3>Literals</h3>
<p>
String literals <i>String</i> have the form
<code>"</code><i>x</i><code>"</code>}, where <i>x</i> is any sequence of any characters
except <code>"</code> unless preceded by <code>\</code>.
</p>
<p>
Integer literals <i>Integer</i> are nonempty sequences of digits.
</p>
<p>
Double-precision float literals <i>Double</i> have the structure
indicated by the regular expression <code>digit+ '.' digit+ ('e' ('-')? digit+)?</code> i.e.\
two sequences of digits separated by a decimal point, optionally
followed by an unsigned or negative exponent.
</p>
<p>
UIdent literals are recognized by the regular expression
<code>`</code>upper (letter | digit | '_')*<code>`</code>
</p>
<p>
LIdent literals are recognized by the regular expression
<code>`</code>lower (letter | digit | '_')*<code>`</code>
</p>
<p>
Wild literals are recognized by the regular expression
<code>`</code>'_' char*<code>`</code>
</p>
<h3>Reserved words and symbols</h3>
<p>
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.
</p>
<p>
The reserved words used in specialK are the following:
</p>
<table align="center" cellpadding="4">
<tr>
<td><code>case</code></td>
<td><code>false</code></td>
<td><code>switch</code></td>
<td><code>true</code></td>
</tr>
</table>

<p>
The symbols used in specialK are the following:
</p>
<table align="center" cellpadding="4">
<tr>
<td>{</td>
<td>}</td>
<td>*</td>
<td>?</td>
</tr>
<tr>
<td>!</td>
<td>=&gt;</td>
<td>(</td>
<td>)</td>
</tr>
<tr>
<td>@</td>
<td>;</td>
<td>,</td>
</tr>
</table>

<h3>Comments</h3>
<p>
Single-line comments begin with //.Multiple-line comments are  enclosed with /* and */.
</p>
<h2>The syntactic structure of specialK</h2>
<p>
Non-terminals are enclosed between &lt; and &gt;. 
The symbols -&gt; (production),  <b>|</b>  (union) 
and <b>eps</b> (empty rule) belong to the BNF notation. 
All other symbols are terminals.
</p>
<table align="center" cellpadding="4">
<tr>
<td><i>Agent</i></td>
<td>-&gt;</td>
<td><code>{</code> <i>[Agent]</i> <code>}</code></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><code>switch</code> <code>{</code> <i>[GuardedAgent]</i> <code>}</code></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><code>*</code> <i>Variation</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Pattern</i> <code>?</code> <i>Abstraction</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Pattern</i> <code>!</code> <i>Concretion</i></td>
</tr>
<tr>
<td><i>GuardedAgent</i></td>
<td>-&gt;</td>
<td><code>case</code> <i>Pattern</i> <code>=&gt;</code> <i>Agent</i></td>
</tr>
<tr>
<td><i>Abstraction</i></td>
<td>-&gt;</td>
<td><code>(</code> <i>Variation</i> <code>)</code> <i>Agent</i></td>
</tr>
<tr>
<td><i>Concretion</i></td>
<td>-&gt;</td>
<td><code>(</code> <i>Information</i> <code>)</code> <i>Agent</i></td>
</tr>
<tr>
<td><i>Pattern</i></td>
<td>-&gt;</td>
<td><i>Symbol</i> <code>(</code> <i>[Pattern]</i> <code>)</code></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Variation</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Value</i></td>
</tr>
<tr>
<td><i>Symbol</i></td>
<td>-&gt;</td>
<td><i>LIdent</i></td>
</tr>
<tr>
<td><i>Variation</i></td>
<td>-&gt;</td>
<td><i>UIdent</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><code>@</code> <i>Agent</i></td>
</tr>
<tr>
<td><i>Information</i></td>
<td>-&gt;</td>
<td><i>Variation</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Agent</i></td>
</tr>
<tr>
<td><i>Value</i></td>
<td>-&gt;</td>
<td><i>Duality</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>String</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Integer</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Double</i></td>
</tr>
<tr>
<td><i>Duality</i></td>
<td>-&gt;</td>
<td><code>true</code></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><code>false</code></td>
</tr>
<tr>
<td><i>[Agent]</i></td>
<td>-&gt;</td>
<td><b>eps</b></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Agent</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Agent</i> <code>;</code> <i>[Agent]</i></td>
</tr>
<tr>
<td><i>[GuardedAgent]</i></td>
<td>-&gt;</td>
<td><b>eps</b></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>GuardedAgent</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>GuardedAgent</i> <code>;</code> <i>[GuardedAgent]</i></td>
</tr>
<tr>
<td><i>[Pattern]</i></td>
<td>-&gt;</td>
<td><b>eps</b></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Pattern</i></td>
</tr>
<tr>
<td></td>
<td align="center"><b>|</b></td>
<td><i>Pattern</i> <code>,</code> <i>[Pattern]</i></td>
</tr>
</table>
</lift:surround>
