-- -*- mode: Haskell;-*- 
-- Filename:    rlambda.cf 
-- Authors:     lgm                                                    
-- Creation:    Fri May  1 13:17:06 2009 
-- Copyright:   Not supplied 
-- Description: 
-- ------------------------------------------------------------------------

-- Programs are merely syntactic sugar over the core lambda calculus :
-- Sequencing of expressions can be interpreted
-- desugar( e1; es ) = val v1 = e1 ; desugar( es )
Progression     . Program       ::= Expression ";" Program                  ;
Completion      . Program       ::=                                         ;

-- Binding of variables to values can be interpreted
-- desugar( val v = e1 ; e ) = ( ( v ) => e )( e1 )
Binding         . Program       ::= "val" VariableExpr "=" Expression ";" Program ;

-- Endowing the core computational model with (polymorphic) arithmetic expressions
Calculation     . Expression    ::= ArithmeticExpr                          ;

-- Programs are Expressions
Embedding       . Expression    ::= "{" Program "}"                         ;

-- Basic arithmetic syntax
Summation       . ArithmeticExpr  ::= ArithmeticExpr "+" ArithmeticExpr1    ;
Multiplication  . ArithmeticExpr1 ::= ArithmeticExpr1 "*" ArithmeticExpr2   ;
Negation        . ArithmeticExpr2 ::= "-" ArithmeticExpr2                   ;
Function        . ArithmeticExpr2 ::= LambdaExpr                            ;

_               . ArithmeticExpr  ::= ArithmeticExpr1                       ;
_               . ArithmeticExpr1 ::= ArithmeticExpr2                       ;

-- Core lambda calculus in scala-style syntax
Application     . LambdaExpr      ::= LambdaExpr1 "(" [LambdaExpr] ")"      ;
Abstraction     . LambdaExpr1     ::= "(" [VariableExpr] ")" "=>" "{" Program "}" ;
Mention         . LambdaExpr1     ::= VariableExpr                          ;

-- enriched with values and arithmetic expressions
Value           . LambdaExpr1     ::= ValueExpr                             ;
Association     . LambdaExpr1     ::= "{" ArithmeticExpr "}"                ;

_               . LambdaExpr      ::= LambdaExpr1                           ;

-- Traditionally, some form of identifier is assumed
Atom            . VariableExpr  ::= Ident                                   ;
-- But, this is not necessary if we use expression syntax, itself 
-- to form identifiers
Transcription   . VariableExpr  ::= "@" "<" Expression ">"                  ;

-- Basic list syntax
Listed          . ValueExpr     ::= "[" [Expression] "]"                    ;

-- Ground value are restricted to Numeric types, Booleans, and Strings
Quantity        . ValueExpr     ::= Numeric                                 ;
Quality         . ValueExpr     ::= Logical                                 ;
Utterance       . ValueExpr     ::= String                                  ;

-- Numeric types are limited to just Doubles and Integers
Measure         . Numeric       ::= Double                                  ;
Count           . Numeric       ::= Integer                                 ;

Verity          . Logical        ::= "true"                                 ;
Absurdity       . Logical        ::= "false"                                ;

-- Syntactic repetition constructs
[]              . [VariableExpr] ::=                                        ;
(: [])          . [VariableExpr] ::= VariableExpr                           ;
(:)             . [VariableExpr] ::= VariableExpr "," [VariableExpr]        ;

[]              . [Expression]   ::=                                        ;
(: [])          . [Expression]   ::= Expression                             ;
(:)             . [Expression]   ::= Expression "," [Expression]            ;

[]              . [LambdaExpr]   ::=                                        ;
(: [])          . [LambdaExpr]   ::= LambdaExpr                             ;
(:)             . [LambdaExpr]   ::= LambdaExpr "," [LambdaExpr]            ;

comment "//" ;
comment "/*" "*/" ;
