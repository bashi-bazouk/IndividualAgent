// -*- Java -*- This Cup file was machine-generated by BNFC
package com.biosimilarity.rlambdaDC.lang.rlambdaDC;

parser code {:
  public com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Expression pExpression() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Expression) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Expression Expression;
nonterminal com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Expression Expression1;
nonterminal com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.ContinueExpr ContinueExpr;
nonterminal com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.VariableExpr VariableExpr;
nonterminal com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.ValueExpr ValueExpr;
nonterminal com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.ListVariableExpr ListVariableExpr;

terminal _SYMB_0;    //   .
terminal _SYMB_1;    //   (
terminal _SYMB_2;    //   )
terminal _SYMB_3;    //   @
terminal _SYMB_4;    //   <
terminal _SYMB_5;    //   >
terminal _SYMB_6;    //   ,
terminal _SYMB_7;    //   lambda
terminal _SYMB_8;    //   newPrompt
terminal _SYMB_9;    //   pushPrompt
terminal _SYMB_10;    //   pushSubCont
terminal _SYMB_11;    //   withSubCont



terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Expression;


Expression ::= Expression:p_1 Expression1:p_2  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Application(p_1,p_2); :} 
  | Expression1:p_1  {: RESULT = p_1; :}
;
Expression1 ::= VariableExpr:p_1  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Mention(p_1); :} 
  | ValueExpr:p_1  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Value(p_1); :}
  | ContinueExpr:p_1  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Continuation(p_1); :}
  | _SYMB_7 ListVariableExpr:p_2 _SYMB_0 Expression1:p_4  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Abstraction(p_2,p_4); :}
  | _SYMB_1 Expression:p_2 _SYMB_2  {: RESULT = p_2; :}
;
ContinueExpr ::= _SYMB_8  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Prompt(); :} 
  | _SYMB_9 Expression1:p_2 Expression1:p_3  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.PushPrompt(p_2,p_3); :}
  | _SYMB_11 Expression1:p_2 Expression1:p_3  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Subcontinuation(p_2,p_3); :}
  | _SYMB_10 Expression1:p_2 Expression1:p_3  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.PushSubCont(p_2,p_3); :}
;
VariableExpr ::= _SYMB_3 _SYMB_4 Expression1:p_3 _SYMB_5  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Transcription(p_3); :} 
  | _IDENT_:p_1  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.AtomLiteral(p_1); :}
;
ValueExpr ::= _INTEGER_:p_1  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.Numeric(p_1); :} 
;
ListVariableExpr ::=  /* empty */  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.ListVariableExpr(); :} 
  | VariableExpr:p_1  {: RESULT = new com.biosimilarity.rlambdaDC.lang.rlambdaDC.Absyn.ListVariableExpr(); RESULT.addLast(p_1); :}
  | VariableExpr:p_1 _SYMB_6 ListVariableExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

