
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 19 22:19:27 PST 2012
//----------------------------------------------------

package com.biosimilarity.lift.model.specialK;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 19 22:19:27 PST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\002\004\000\002\002\005\000\002\002\005" +
    "\000\002\003\006\000\002\004\006\000\002\005\006\000" +
    "\002\006\006\000\002\006\003\000\002\006\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\004\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\002\000\002\014\003\000\002" +
    "\014\005\000\002\015\002\000\002\015\003\000\002\015" +
    "\005\000\002\016\002\000\002\016\003\000\002\016\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\030\004\012\006\006\014\004\020\022\021" +
    "\021\022\017\023\020\024\023\025\024\026\010\027\015" +
    "\001\002\000\030\004\012\006\006\014\004\020\022\021" +
    "\021\022\017\023\020\024\023\025\024\026\010\027\015" +
    "\001\002\000\004\002\071\001\002\000\006\014\004\026" +
    "\010\001\002\000\014\007\ufff0\010\ufff0\011\ufff0\013\ufff0" +
    "\016\ufff0\001\002\000\022\002\ufff4\005\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\013\ufff4\015\ufff4\016\ufff4\001\002\000\006" +
    "\007\053\010\052\001\002\000\032\004\012\005\uffea\006" +
    "\006\014\004\020\022\021\021\022\017\023\020\024\023" +
    "\025\024\026\010\027\015\001\002\000\014\007\ufff7\010" +
    "\ufff7\011\ufff7\013\ufff7\016\ufff7\001\002\000\004\012\037" +
    "\001\002\000\004\012\ufff5\001\002\000\014\007\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\016\ufff6\001\002\000\014\007\uffec" +
    "\010\uffec\011\uffec\013\uffec\016\uffec\001\002\000\014\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\016\uffef\001\002\000\004" +
    "\004\025\001\002\000\014\007\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\016\uffeb\001\002\000\014\007\uffee\010\uffee\011\uffee" +
    "\013\uffee\016\uffee\001\002\000\014\007\uffed\010\uffed\011" +
    "\uffed\013\uffed\016\uffed\001\002\000\006\005\uffe7\017\030" +
    "\001\002\000\004\005\036\001\002\000\006\005\uffe6\015" +
    "\034\001\002\000\022\014\004\020\022\022\017\023\020" +
    "\024\023\025\024\026\010\027\015\001\002\000\004\011" +
    "\032\001\002\000\030\004\012\006\006\014\004\020\022" +
    "\021\021\022\017\023\020\024\023\025\024\026\010\027" +
    "\015\001\002\000\006\005\ufffb\015\ufffb\001\002\000\006" +
    "\005\uffe7\017\030\001\002\000\004\005\uffe5\001\002\000" +
    "\022\002\uffff\005\uffff\007\uffff\010\uffff\011\uffff\013\uffff" +
    "\015\uffff\016\uffff\001\002\000\024\013\uffe4\014\004\020" +
    "\022\022\017\023\020\024\023\025\024\026\010\027\015" +
    "\001\002\000\006\013\uffe3\016\043\001\002\000\004\013" +
    "\042\001\002\000\014\007\ufff8\010\ufff8\011\ufff8\013\ufff8" +
    "\016\ufff8\001\002\000\024\013\uffe4\014\004\020\022\022" +
    "\017\023\020\024\023\025\024\026\010\027\015\001\002" +
    "\000\004\013\uffe2\001\002\000\004\005\051\001\002\000" +
    "\006\005\uffe9\015\047\001\002\000\032\004\012\005\uffea" +
    "\006\006\014\004\020\022\021\021\022\017\023\020\024" +
    "\023\025\024\026\010\027\015\001\002\000\004\005\uffe8" +
    "\001\002\000\022\002\000\005\000\007\000\010\000\011" +
    "\000\013\000\015\000\016\000\001\002\000\004\012\062" +
    "\001\002\000\004\012\055\001\002\000\022\002\ufffd\005" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd\015\ufffd\016\ufffd" +
    "\001\002\000\006\014\004\026\010\001\002\000\004\013" +
    "\057\001\002\000\030\004\012\006\006\014\004\020\022" +
    "\021\021\022\017\023\020\024\023\025\024\026\010\027" +
    "\015\001\002\000\022\002\ufffa\005\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\013\ufffa\015\ufffa\016\ufffa\001\002\000\022\002" +
    "\ufffc\005\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\015\ufffc" +
    "\016\ufffc\001\002\000\030\004\012\006\006\014\004\020" +
    "\022\021\021\022\017\023\020\024\023\025\024\026\010" +
    "\027\015\001\002\000\004\013\ufff1\001\002\000\004\013" +
    "\066\001\002\000\010\007\ufff7\010\ufff7\013\ufff2\001\002" +
    "\000\030\004\012\006\006\014\004\020\022\021\021\022" +
    "\017\023\020\024\023\025\024\026\010\027\015\001\002" +
    "\000\022\002\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9\013" +
    "\ufff9\015\ufff9\016\ufff9\001\002\000\022\002\ufffe\005\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\013\ufffe\015\ufffe\016\ufffe\001" +
    "\002\000\004\002\001\001\002\000\022\002\ufff3\005\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\013\ufff3\015\ufff3\016\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\016\002\004\006\010\007\013\010\012\012" +
    "\015\013\006\001\001\000\016\002\071\006\010\007\013" +
    "\010\012\012\015\013\006\001\001\000\002\001\001\000" +
    "\004\010\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\045\006\010\007\013\010" +
    "\012\012\015\013\006\014\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\026\015\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\030\007\013\010\012\012\015\013\006\001" +
    "\001\000\002\001\001\000\016\002\032\006\010\007\013" +
    "\010\012\012\015\013\006\001\001\000\002\001\001\000" +
    "\006\003\026\015\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\037\007\013\010\012\012\015\013" +
    "\006\016\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\037\007\013\010\012\012" +
    "\015\013\006\016\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\045\006\010\007" +
    "\013\010\012\012\015\013\006\014\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\060\001\001\000" +
    "\004\004\053\001\001\000\002\001\001\000\004\010\055" +
    "\001\001\000\002\001\001\000\016\002\057\006\010\007" +
    "\013\010\012\012\015\013\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\062\006\010\007\013\010" +
    "\064\011\063\012\015\013\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\066\006" +
    "\010\007\013\010\012\012\015\013\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.lift.model.specialK.Absyn.Agent pAgent() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.model.specialK.Absyn.Agent) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListPattern ::= Pattern _SYMB_10 ListPattern 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListPattern RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Pattern p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.specialK.Absyn.ListPattern p_3 = (com.biosimilarity.lift.model.specialK.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListPattern ::= Pattern 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListPattern RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Pattern p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListPattern ::= 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListPattern RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPattern",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListGuardedAgent ::= GuardedAgent _SYMB_9 ListGuardedAgent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.GuardedAgent p_1 = (com.biosimilarity.lift.model.specialK.Absyn.GuardedAgent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent p_3 = (com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListGuardedAgent",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListGuardedAgent ::= GuardedAgent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.GuardedAgent p_1 = (com.biosimilarity.lift.model.specialK.Absyn.GuardedAgent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListGuardedAgent",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListGuardedAgent ::= 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListGuardedAgent",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListAgent ::= Agent _SYMB_9 ListAgent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListAgent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Agent p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.specialK.Absyn.ListAgent p_3 = (com.biosimilarity.lift.model.specialK.Absyn.ListAgent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAgent",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListAgent ::= Agent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListAgent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Agent p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Agent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListAgent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAgent",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListAgent ::= 
            {
              com.biosimilarity.lift.model.specialK.Absyn.ListAgent RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListAgent(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListAgent",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Duality ::= _SYMB_12 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Duality RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Absurdity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Duality",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Duality ::= _SYMB_14 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Duality RESULT =null;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Verity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Duality",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Value ::= _DOUBLE_ 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Value RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.DoubleLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Value ::= _INTEGER_ 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Value RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.IntegerLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Value ::= _STRING_ 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Value RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.StringLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Value ::= Duality 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Value RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Duality p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Duality)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.BooleanLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Information ::= Agent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Information RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Agent p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Agent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Reflection(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Information",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Information ::= Variation 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Information RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Variation p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Variation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Indirection(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Information",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Variation ::= _SYMB_8 Agent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Variation RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Agent p_2 = (com.biosimilarity.lift.model.specialK.Absyn.Agent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Transcription(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variation",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Variation ::= UIdent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Variation RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Atomic(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variation",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Symbol ::= LIdent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Symbol RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Tag(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Symbol",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Pattern ::= Value 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Pattern RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Value p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Literal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Pattern ::= Variation 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Pattern RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Variation p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Variation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Variable(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Pattern ::= Symbol _SYMB_6 ListPattern _SYMB_7 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Pattern RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Symbol p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.model.specialK.Absyn.ListPattern p_3 = (com.biosimilarity.lift.model.specialK.Absyn.ListPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Element(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Concretion ::= _SYMB_6 Information _SYMB_7 Agent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Concretion RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Information p_2 = (com.biosimilarity.lift.model.specialK.Absyn.Information)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.specialK.Absyn.Agent p_4 = (com.biosimilarity.lift.model.specialK.Absyn.Agent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Applicand(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Concretion",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Abstraction ::= _SYMB_6 Variation _SYMB_7 Agent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Abstraction RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Variation p_2 = (com.biosimilarity.lift.model.specialK.Absyn.Variation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.specialK.Absyn.Agent p_4 = (com.biosimilarity.lift.model.specialK.Absyn.Agent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Applicant(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Abstraction",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GuardedAgent ::= _SYMB_11 Pattern _SYMB_5 Agent 
            {
              com.biosimilarity.lift.model.specialK.Absyn.GuardedAgent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Pattern p_2 = (com.biosimilarity.lift.model.specialK.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.specialK.Absyn.Agent p_4 = (com.biosimilarity.lift.model.specialK.Absyn.Agent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Injection(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GuardedAgent",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Agent ::= Pattern _SYMB_4 Concretion 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Agent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Pattern p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.specialK.Absyn.Concretion p_3 = (com.biosimilarity.lift.model.specialK.Absyn.Concretion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Excretion(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Agent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Agent ::= Pattern _SYMB_3 Abstraction 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Agent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Pattern p_1 = (com.biosimilarity.lift.model.specialK.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.model.specialK.Absyn.Abstraction p_3 = (com.biosimilarity.lift.model.specialK.Absyn.Abstraction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Ingestion(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Agent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Agent ::= _SYMB_2 Variation 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Agent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Variation p_2 = (com.biosimilarity.lift.model.specialK.Absyn.Variation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Replication(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Agent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Agent ::= _SYMB_13 _SYMB_0 ListGuardedAgent _SYMB_1 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Agent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent p_3 = (com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Superposition(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Agent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Agent ::= _SYMB_0 ListAgent _SYMB_1 
            {
              com.biosimilarity.lift.model.specialK.Absyn.Agent RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.ListAgent p_2 = (com.biosimilarity.lift.model.specialK.Absyn.ListAgent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Composition(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Agent",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Agent EOF 
            {
              Object RESULT =null;
		com.biosimilarity.lift.model.specialK.Absyn.Agent start_val = (com.biosimilarity.lift.model.specialK.Absyn.Agent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

