// -*- Java -*- This Cup file was machine-generated by BNFC
package com.biosimilarity.lift.model.specialK;

parser code {:
  public com.biosimilarity.lift.model.specialK.Absyn.Agent pAgent() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.model.specialK.Absyn.Agent) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal com.biosimilarity.lift.model.specialK.Absyn.Agent Agent;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.GuardedAgent GuardedAgent;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.Abstraction Abstraction;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.Concretion Concretion;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.Pattern Pattern;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.Symbol Symbol;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.Variation Variation;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.Information Information;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.Value Value;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.Duality Duality;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.ListAgent ListAgent;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent ListGuardedAgent;
nonterminal com.biosimilarity.lift.model.specialK.Absyn.ListPattern ListPattern;

terminal _SYMB_0;    //   {
terminal _SYMB_1;    //   }
terminal _SYMB_2;    //   *
terminal _SYMB_3;    //   ?
terminal _SYMB_4;    //   !
terminal _SYMB_5;    //   =>
terminal _SYMB_6;    //   (
terminal _SYMB_7;    //   )
terminal _SYMB_8;    //   @
terminal _SYMB_9;    //   ;
terminal _SYMB_10;    //   ,
terminal _SYMB_11;    //   case
terminal _SYMB_12;    //   false
terminal _SYMB_13;    //   switch
terminal _SYMB_14;    //   true

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String UIdent;
terminal String LIdent;
terminal String Wild;


start with Agent;


Agent ::= _SYMB_0 ListAgent:p_2 _SYMB_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Composition(p_2); :} 
  | _SYMB_13 _SYMB_0 ListGuardedAgent:p_3 _SYMB_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Superposition(p_3); :}
  | _SYMB_2 Variation:p_2  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Replication(p_2); :}
  | Pattern:p_1 _SYMB_3 Abstraction:p_3  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Ingestion(p_1,p_3); :}
  | Pattern:p_1 _SYMB_4 Concretion:p_3  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Excretion(p_1,p_3); :}
;
GuardedAgent ::= _SYMB_11 Pattern:p_2 _SYMB_5 Agent:p_4  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Injection(p_2,p_4); :} 
;
Abstraction ::= _SYMB_6 Variation:p_2 _SYMB_7 Agent:p_4  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Applicant(p_2,p_4); :} 
;
Concretion ::= _SYMB_6 Information:p_2 _SYMB_7 Agent:p_4  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Applicand(p_2,p_4); :} 
;
Pattern ::= Symbol:p_1 _SYMB_6 ListPattern:p_3 _SYMB_7  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Element(p_1,p_3); :} 
  | Variation:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Variable(p_1); :}
  | Value:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Literal(p_1); :}
;
Symbol ::= LIdent:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Tag(p_1); :} 
;
Variation ::= UIdent:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Atomic(p_1); :} 
  | _SYMB_8 Agent:p_2  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Transcription(p_2); :}
;
Information ::= Variation:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Indirection(p_1); :} 
  | Agent:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Reflection(p_1); :}
;
Value ::= Duality:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.BooleanLiteral(p_1); :} 
  | _STRING_:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.StringLiteral(p_1); :}
  | _INTEGER_:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.IntegerLiteral(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.DoubleLiteral(p_1); :}
;
Duality ::= _SYMB_14  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Verity(); :} 
  | _SYMB_12  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.Absurdity(); :}
;
ListAgent ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListAgent(); :} 
  | Agent:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListAgent(); RESULT.addLast(p_1); :}
  | Agent:p_1 _SYMB_9 ListAgent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListGuardedAgent ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent(); :} 
  | GuardedAgent:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListGuardedAgent(); RESULT.addLast(p_1); :}
  | GuardedAgent:p_1 _SYMB_9 ListGuardedAgent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListPattern ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListPattern(); :} 
  | Pattern:p_1  {: RESULT = new com.biosimilarity.lift.model.specialK.Absyn.ListPattern(); RESULT.addLast(p_1); :}
  | Pattern:p_1 _SYMB_10 ListPattern:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

