// This JLex file was machine-generated by the BNF converter
package com.biosimilarity.seleKt.model.ill.vm.illvm;

import java_cup.runtime.*;
%%
%cup
%unicode
%line
%public
%{
  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() { return new String(yy_buffer,yy_buffer_index,10).trim(); }
%}
LETTER = ({CAPITAL}|{SMALL})
CAPITAL = [A-Z\xC0-\xD6\xD8-\xDE]
SMALL = [a-z\xDF-\xF6\xF8-\xFF]
DIGIT = [0-9]
IDENT = ({LETTER}|{DIGIT}|['_])
%state COMMENT
%state CHAR
%state CHARESC
%state CHAREND
%state STRING
%state ESCAPED
%%
<YYINITIAL>\( { return new Symbol(sym._SYMB_0); }
<YYINITIAL>; { return new Symbol(sym._SYMB_1); }
<YYINITIAL>\) { return new Symbol(sym._SYMB_2); }
<YYINITIAL>\[ { return new Symbol(sym._SYMB_3); }
<YYINITIAL>\] { return new Symbol(sym._SYMB_4); }
<YYINITIAL>\* { return new Symbol(sym._SYMB_5); }
<YYINITIAL>, { return new Symbol(sym._SYMB_6); }
<YYINITIAL>CASE { return new Symbol(sym._SYMB_7); }
<YYINITIAL>ILLVM { return new Symbol(sym._SYMB_8); }
<YYINITIAL>MAKECCL { return new Symbol(sym._SYMB_9); }
<YYINITIAL>MAKEFCL { return new Symbol(sym._SYMB_10); }
<YYINITIAL>MAKEOCL { return new Symbol(sym._SYMB_11); }
<YYINITIAL>ccl { return new Symbol(sym._SYMB_12); }
<YYINITIAL>fcl { return new Symbol(sym._SYMB_13); }
<YYINITIAL>inl { return new Symbol(sym._SYMB_14); }
<YYINITIAL>inr { return new Symbol(sym._SYMB_15); }
<YYINITIAL>ocl { return new Symbol(sym._SYMB_16); }
<YYINITIAL>"//"[^\n]*\n { /* BNFC single-line comment */ }
<YYINITIAL>"/*" { yybegin(COMMENT); }
<COMMENT>"*/" { yybegin(YYINITIAL); }
<COMMENT>. { }
<COMMENT>[\n] { }


<YYINITIAL>PUSHENV { return new Symbol(sym.IllPUSHENV, yytext().intern()); }
<YYINITIAL>HD { return new Symbol(sym.IllHD, yytext().intern()); }
<YYINITIAL>TL { return new Symbol(sym.IllTL, yytext().intern()); }
<YYINITIAL>RET { return new Symbol(sym.IllRET, yytext().intern()); }
<YYINITIAL>PUSH { return new Symbol(sym.IllPUSH, yytext().intern()); }
<YYINITIAL>POP { return new Symbol(sym.IllPOP, yytext().intern()); }
<YYINITIAL>AP { return new Symbol(sym.IllAP, yytext().intern()); }
<YYINITIAL>UNIT { return new Symbol(sym.IllUNIT, yytext().intern()); }
<YYINITIAL>UNUNIT { return new Symbol(sym.IllUNUNIT, yytext().intern()); }
<YYINITIAL>PAIR { return new Symbol(sym.IllPAIR, yytext().intern()); }
<YYINITIAL>UNPAIR { return new Symbol(sym.IllUNPAIR, yytext().intern()); }
<YYINITIAL>FST { return new Symbol(sym.IllFST, yytext().intern()); }
<YYINITIAL>SND { return new Symbol(sym.IllSND, yytext().intern()); }
<YYINITIAL>INL { return new Symbol(sym.IllINL, yytext().intern()); }
<YYINITIAL>INR { return new Symbol(sym.IllINR, yytext().intern()); }
<YYINITIAL>READ { return new Symbol(sym.IllREAD, yytext().intern()); }
<YYINITIAL>DUP { return new Symbol(sym.IllDUP, yytext().intern()); }






<YYINITIAL>[ \t\r\n\f] { /* ignore white space. */ }
