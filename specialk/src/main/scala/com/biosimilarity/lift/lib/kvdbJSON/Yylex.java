// This JLex file was machine-generated by the BNF converter
package com.biosimilarity.lift.lib.kvdbJSON;
import java_cup.runtime.*;


public class Yylex implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;

  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() { return new String(yy_buffer,yy_buffer_index,10).trim(); }
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	public Yylex (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	public Yylex (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Yylex () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int STRING = 5;
	private final int ESCAPED = 6;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int CHAREND = 4;
	private final int CHARESC = 3;
	private final int CHAR = 2;
	private final int yy_state_dtrans[] = {
		0,
		177,
		177,
		177,
		177,
		178,
		179
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NOT_ACCEPT,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NOT_ACCEPT,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NOT_ACCEPT,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NOT_ACCEPT,
		/* 66 */ YY_NOT_ACCEPT,
		/* 67 */ YY_NOT_ACCEPT,
		/* 68 */ YY_NOT_ACCEPT,
		/* 69 */ YY_NOT_ACCEPT,
		/* 70 */ YY_NOT_ACCEPT,
		/* 71 */ YY_NOT_ACCEPT,
		/* 72 */ YY_NOT_ACCEPT,
		/* 73 */ YY_NOT_ACCEPT,
		/* 74 */ YY_NOT_ACCEPT,
		/* 75 */ YY_NOT_ACCEPT,
		/* 76 */ YY_NOT_ACCEPT,
		/* 77 */ YY_NOT_ACCEPT,
		/* 78 */ YY_NOT_ACCEPT,
		/* 79 */ YY_NOT_ACCEPT,
		/* 80 */ YY_NOT_ACCEPT,
		/* 81 */ YY_NOT_ACCEPT,
		/* 82 */ YY_NOT_ACCEPT,
		/* 83 */ YY_NOT_ACCEPT,
		/* 84 */ YY_NOT_ACCEPT,
		/* 85 */ YY_NOT_ACCEPT,
		/* 86 */ YY_NOT_ACCEPT,
		/* 87 */ YY_NOT_ACCEPT,
		/* 88 */ YY_NOT_ACCEPT,
		/* 89 */ YY_NOT_ACCEPT,
		/* 90 */ YY_NOT_ACCEPT,
		/* 91 */ YY_NOT_ACCEPT,
		/* 92 */ YY_NOT_ACCEPT,
		/* 93 */ YY_NOT_ACCEPT,
		/* 94 */ YY_NOT_ACCEPT,
		/* 95 */ YY_NOT_ACCEPT,
		/* 96 */ YY_NOT_ACCEPT,
		/* 97 */ YY_NOT_ACCEPT,
		/* 98 */ YY_NOT_ACCEPT,
		/* 99 */ YY_NOT_ACCEPT,
		/* 100 */ YY_NOT_ACCEPT,
		/* 101 */ YY_NOT_ACCEPT,
		/* 102 */ YY_NOT_ACCEPT,
		/* 103 */ YY_NOT_ACCEPT,
		/* 104 */ YY_NOT_ACCEPT,
		/* 105 */ YY_NOT_ACCEPT,
		/* 106 */ YY_NOT_ACCEPT,
		/* 107 */ YY_NOT_ACCEPT,
		/* 108 */ YY_NOT_ACCEPT,
		/* 109 */ YY_NOT_ACCEPT,
		/* 110 */ YY_NOT_ACCEPT,
		/* 111 */ YY_NOT_ACCEPT,
		/* 112 */ YY_NOT_ACCEPT,
		/* 113 */ YY_NOT_ACCEPT,
		/* 114 */ YY_NOT_ACCEPT,
		/* 115 */ YY_NOT_ACCEPT,
		/* 116 */ YY_NOT_ACCEPT,
		/* 117 */ YY_NOT_ACCEPT,
		/* 118 */ YY_NOT_ACCEPT,
		/* 119 */ YY_NOT_ACCEPT,
		/* 120 */ YY_NOT_ACCEPT,
		/* 121 */ YY_NOT_ACCEPT,
		/* 122 */ YY_NOT_ACCEPT,
		/* 123 */ YY_NOT_ACCEPT,
		/* 124 */ YY_NOT_ACCEPT,
		/* 125 */ YY_NOT_ACCEPT,
		/* 126 */ YY_NOT_ACCEPT,
		/* 127 */ YY_NOT_ACCEPT,
		/* 128 */ YY_NOT_ACCEPT,
		/* 129 */ YY_NOT_ACCEPT,
		/* 130 */ YY_NOT_ACCEPT,
		/* 131 */ YY_NOT_ACCEPT,
		/* 132 */ YY_NOT_ACCEPT,
		/* 133 */ YY_NOT_ACCEPT,
		/* 134 */ YY_NOT_ACCEPT,
		/* 135 */ YY_NOT_ACCEPT,
		/* 136 */ YY_NOT_ACCEPT,
		/* 137 */ YY_NOT_ACCEPT,
		/* 138 */ YY_NOT_ACCEPT,
		/* 139 */ YY_NOT_ACCEPT,
		/* 140 */ YY_NOT_ACCEPT,
		/* 141 */ YY_NOT_ACCEPT,
		/* 142 */ YY_NOT_ACCEPT,
		/* 143 */ YY_NOT_ACCEPT,
		/* 144 */ YY_NOT_ACCEPT,
		/* 145 */ YY_NOT_ACCEPT,
		/* 146 */ YY_NOT_ACCEPT,
		/* 147 */ YY_NOT_ACCEPT,
		/* 148 */ YY_NOT_ACCEPT,
		/* 149 */ YY_NOT_ACCEPT,
		/* 150 */ YY_NOT_ACCEPT,
		/* 151 */ YY_NOT_ACCEPT,
		/* 152 */ YY_NOT_ACCEPT,
		/* 153 */ YY_NOT_ACCEPT,
		/* 154 */ YY_NOT_ACCEPT,
		/* 155 */ YY_NOT_ACCEPT,
		/* 156 */ YY_NOT_ACCEPT,
		/* 157 */ YY_NOT_ACCEPT,
		/* 158 */ YY_NOT_ACCEPT,
		/* 159 */ YY_NOT_ACCEPT,
		/* 160 */ YY_NOT_ACCEPT,
		/* 161 */ YY_NOT_ACCEPT,
		/* 162 */ YY_NOT_ACCEPT,
		/* 163 */ YY_NOT_ACCEPT,
		/* 164 */ YY_NOT_ACCEPT,
		/* 165 */ YY_NOT_ACCEPT,
		/* 166 */ YY_NOT_ACCEPT,
		/* 167 */ YY_NOT_ACCEPT,
		/* 168 */ YY_NOT_ACCEPT,
		/* 169 */ YY_NOT_ACCEPT,
		/* 170 */ YY_NOT_ACCEPT,
		/* 171 */ YY_NOT_ACCEPT,
		/* 172 */ YY_NOT_ACCEPT,
		/* 173 */ YY_NOT_ACCEPT,
		/* 174 */ YY_NOT_ACCEPT,
		/* 175 */ YY_NOT_ACCEPT,
		/* 176 */ YY_NOT_ACCEPT,
		/* 177 */ YY_NOT_ACCEPT,
		/* 178 */ YY_NOT_ACCEPT,
		/* 179 */ YY_NOT_ACCEPT,
		/* 180 */ YY_NO_ANCHOR,
		/* 181 */ YY_NOT_ACCEPT,
		/* 182 */ YY_NOT_ACCEPT,
		/* 183 */ YY_NOT_ACCEPT,
		/* 184 */ YY_NOT_ACCEPT,
		/* 185 */ YY_NOT_ACCEPT,
		/* 186 */ YY_NOT_ACCEPT,
		/* 187 */ YY_NOT_ACCEPT,
		/* 188 */ YY_NOT_ACCEPT,
		/* 189 */ YY_NOT_ACCEPT,
		/* 190 */ YY_NOT_ACCEPT,
		/* 191 */ YY_NOT_ACCEPT,
		/* 192 */ YY_NOT_ACCEPT,
		/* 193 */ YY_NOT_ACCEPT,
		/* 194 */ YY_NOT_ACCEPT,
		/* 195 */ YY_NOT_ACCEPT,
		/* 196 */ YY_NOT_ACCEPT,
		/* 197 */ YY_NOT_ACCEPT,
		/* 198 */ YY_NOT_ACCEPT,
		/* 199 */ YY_NOT_ACCEPT,
		/* 200 */ YY_NOT_ACCEPT,
		/* 201 */ YY_NOT_ACCEPT,
		/* 202 */ YY_NOT_ACCEPT,
		/* 203 */ YY_NOT_ACCEPT,
		/* 204 */ YY_NOT_ACCEPT,
		/* 205 */ YY_NOT_ACCEPT,
		/* 206 */ YY_NOT_ACCEPT,
		/* 207 */ YY_NO_ANCHOR,
		/* 208 */ YY_NOT_ACCEPT,
		/* 209 */ YY_NOT_ACCEPT,
		/* 210 */ YY_NOT_ACCEPT,
		/* 211 */ YY_NOT_ACCEPT,
		/* 212 */ YY_NOT_ACCEPT,
		/* 213 */ YY_NOT_ACCEPT,
		/* 214 */ YY_NOT_ACCEPT,
		/* 215 */ YY_NO_ANCHOR,
		/* 216 */ YY_NOT_ACCEPT,
		/* 217 */ YY_NOT_ACCEPT,
		/* 218 */ YY_NOT_ACCEPT,
		/* 219 */ YY_NOT_ACCEPT,
		/* 220 */ YY_NOT_ACCEPT,
		/* 221 */ YY_NOT_ACCEPT,
		/* 222 */ YY_NOT_ACCEPT,
		/* 223 */ YY_NOT_ACCEPT,
		/* 224 */ YY_NOT_ACCEPT,
		/* 225 */ YY_NOT_ACCEPT,
		/* 226 */ YY_NOT_ACCEPT,
		/* 227 */ YY_NOT_ACCEPT,
		/* 228 */ YY_NOT_ACCEPT,
		/* 229 */ YY_NOT_ACCEPT,
		/* 230 */ YY_NOT_ACCEPT,
		/* 231 */ YY_NOT_ACCEPT,
		/* 232 */ YY_NO_ANCHOR,
		/* 233 */ YY_NOT_ACCEPT,
		/* 234 */ YY_NOT_ACCEPT,
		/* 235 */ YY_NOT_ACCEPT,
		/* 236 */ YY_NOT_ACCEPT,
		/* 237 */ YY_NOT_ACCEPT,
		/* 238 */ YY_NOT_ACCEPT,
		/* 239 */ YY_NOT_ACCEPT,
		/* 240 */ YY_NOT_ACCEPT,
		/* 241 */ YY_NOT_ACCEPT,
		/* 242 */ YY_NOT_ACCEPT,
		/* 243 */ YY_NOT_ACCEPT,
		/* 244 */ YY_NOT_ACCEPT,
		/* 245 */ YY_NOT_ACCEPT,
		/* 246 */ YY_NO_ANCHOR,
		/* 247 */ YY_NOT_ACCEPT,
		/* 248 */ YY_NOT_ACCEPT,
		/* 249 */ YY_NOT_ACCEPT,
		/* 250 */ YY_NO_ANCHOR,
		/* 251 */ YY_NOT_ACCEPT,
		/* 252 */ YY_NOT_ACCEPT,
		/* 253 */ YY_NOT_ACCEPT,
		/* 254 */ YY_NOT_ACCEPT,
		/* 255 */ YY_NOT_ACCEPT,
		/* 256 */ YY_NOT_ACCEPT,
		/* 257 */ YY_NOT_ACCEPT,
		/* 258 */ YY_NOT_ACCEPT,
		/* 259 */ YY_NOT_ACCEPT,
		/* 260 */ YY_NOT_ACCEPT,
		/* 261 */ YY_NOT_ACCEPT,
		/* 262 */ YY_NOT_ACCEPT,
		/* 263 */ YY_NO_ANCHOR,
		/* 264 */ YY_NOT_ACCEPT,
		/* 265 */ YY_NOT_ACCEPT,
		/* 266 */ YY_NOT_ACCEPT,
		/* 267 */ YY_NOT_ACCEPT,
		/* 268 */ YY_NOT_ACCEPT,
		/* 269 */ YY_NOT_ACCEPT,
		/* 270 */ YY_NOT_ACCEPT,
		/* 271 */ YY_NOT_ACCEPT,
		/* 272 */ YY_NOT_ACCEPT,
		/* 273 */ YY_NOT_ACCEPT,
		/* 274 */ YY_NOT_ACCEPT,
		/* 275 */ YY_NOT_ACCEPT,
		/* 276 */ YY_NOT_ACCEPT,
		/* 277 */ YY_NOT_ACCEPT,
		/* 278 */ YY_NOT_ACCEPT,
		/* 279 */ YY_NOT_ACCEPT,
		/* 280 */ YY_NOT_ACCEPT,
		/* 281 */ YY_NOT_ACCEPT,
		/* 282 */ YY_NOT_ACCEPT,
		/* 283 */ YY_NOT_ACCEPT,
		/* 284 */ YY_NOT_ACCEPT,
		/* 285 */ YY_NOT_ACCEPT,
		/* 286 */ YY_NOT_ACCEPT,
		/* 287 */ YY_NOT_ACCEPT,
		/* 288 */ YY_NOT_ACCEPT,
		/* 289 */ YY_NOT_ACCEPT,
		/* 290 */ YY_NOT_ACCEPT,
		/* 291 */ YY_NOT_ACCEPT,
		/* 292 */ YY_NOT_ACCEPT,
		/* 293 */ YY_NOT_ACCEPT,
		/* 294 */ YY_NOT_ACCEPT,
		/* 295 */ YY_NOT_ACCEPT,
		/* 296 */ YY_NOT_ACCEPT,
		/* 297 */ YY_NOT_ACCEPT,
		/* 298 */ YY_NOT_ACCEPT,
		/* 299 */ YY_NOT_ACCEPT,
		/* 300 */ YY_NOT_ACCEPT,
		/* 301 */ YY_NOT_ACCEPT,
		/* 302 */ YY_NOT_ACCEPT,
		/* 303 */ YY_NOT_ACCEPT,
		/* 304 */ YY_NOT_ACCEPT,
		/* 305 */ YY_NOT_ACCEPT,
		/* 306 */ YY_NOT_ACCEPT,
		/* 307 */ YY_NOT_ACCEPT,
		/* 308 */ YY_NOT_ACCEPT,
		/* 309 */ YY_NOT_ACCEPT,
		/* 310 */ YY_NOT_ACCEPT,
		/* 311 */ YY_NOT_ACCEPT,
		/* 312 */ YY_NOT_ACCEPT,
		/* 313 */ YY_NOT_ACCEPT,
		/* 314 */ YY_NOT_ACCEPT,
		/* 315 */ YY_NOT_ACCEPT,
		/* 316 */ YY_NOT_ACCEPT,
		/* 317 */ YY_NOT_ACCEPT,
		/* 318 */ YY_NOT_ACCEPT,
		/* 319 */ YY_NOT_ACCEPT,
		/* 320 */ YY_NOT_ACCEPT,
		/* 321 */ YY_NOT_ACCEPT,
		/* 322 */ YY_NOT_ACCEPT,
		/* 323 */ YY_NOT_ACCEPT,
		/* 324 */ YY_NOT_ACCEPT,
		/* 325 */ YY_NOT_ACCEPT,
		/* 326 */ YY_NOT_ACCEPT,
		/* 327 */ YY_NOT_ACCEPT,
		/* 328 */ YY_NOT_ACCEPT,
		/* 329 */ YY_NOT_ACCEPT,
		/* 330 */ YY_NOT_ACCEPT,
		/* 331 */ YY_NOT_ACCEPT,
		/* 332 */ YY_NOT_ACCEPT,
		/* 333 */ YY_NOT_ACCEPT,
		/* 334 */ YY_NOT_ACCEPT,
		/* 335 */ YY_NOT_ACCEPT,
		/* 336 */ YY_NOT_ACCEPT,
		/* 337 */ YY_NOT_ACCEPT,
		/* 338 */ YY_NOT_ACCEPT,
		/* 339 */ YY_NOT_ACCEPT,
		/* 340 */ YY_NOT_ACCEPT,
		/* 341 */ YY_NOT_ACCEPT,
		/* 342 */ YY_NOT_ACCEPT,
		/* 343 */ YY_NOT_ACCEPT
	};
	private int yy_cmap[] = unpackFromString(1,65538,
"42:9,47,48,42,47,48,42:18,47,42,4,42,37,42:2,16,42:4,2,45,36,35,40:10,11,42" +
":2,44,42,43,42,38,25,38:2,21,38:2,24,38:9,19,38:8,15,46,17,42,41,42,7,12,30" +
",8,6,33,31,5,34,39,26,29,22,27,13,23,20,9,10,18,32,39,28,39,14,39,1,42,3,42" +
":66,38:23,42,38:7,39:24,42,39:8,42:65280,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,344,
"0,1:4,2,3,1:4,4,1:2,5,6,1,7,1:2,3:2,1,3,1:34,8,9,10,11,12,13,14,15,16,17,18" +
",19,20,21,22,23,24,25,26,27,10,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42" +
",43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67" +
",68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92" +
",93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,1" +
"13,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131," +
"132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150" +
",151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,16" +
"9,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,1" +
"88,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206," +
"207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225" +
",226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,24" +
"4,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,2" +
"63,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281," +
"282,283,284,285,286,287,288,289,290,291,292")[0];

	private int yy_nxt[][] = unpackFromString(293,49,
"1,2,3,4,5,6:6,7,6:3,8,9,10,232,11,6,11,6:2,11:2,6,246,6:5,263,6,12,13,-1,11" +
",6,14,15,-1:5,16:2,-1:54,58,61,182,61,327,283,-1,234,181,335,-1:3,264,-1,33" +
"5,-1,335,233,-1:2,335,297,335:2,61,247,335,209,335,-1:2,63,-1,335,65,-1:13," +
"6:6,-1,6:3,-1:3,6:17,-1:3,6:4,-1:12,11:6,-1,11:3,-1:3,11:17,-1:3,11:4,-1:43" +
",66,-1:3,14,-1:9,15:47,-1:7,73,-1:33,17,-1:13,335,307,335:4,67,335:3,-1:3,3" +
"35,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,6,20,6:4,-1,6:3,-1:3,6:17,-1:3" +
",6:4,-1:47,60,-1:13,335,217:3,335:2,67,217,335:2,-1:3,335,-1,335,-1,335:2,-" +
"1:2,335:4,217,335:2,217,335,-1:4,335,328,-1:13,6:6,-1,6:3,-1:3,6:11,21,6:5," +
"-1:3,6:4,-1:26,70,-1,70,-1:2,70:2,-1:12,70,-1:15,6,23,6:4,-1,6:3,-1:3,6:17," +
"-1:3,6:4,-1:13,328:3,-1:3,328,-1:17,328,-1:2,328,-1:6,328,-1:48,17,-1:43,18" +
"4,-1:18,335,285:3,335:2,67,285,335:2,-1:3,335,-1,335,-1,335:2,-1:2,320,335:" +
"3,285,335:2,285,335,-1:4,335,308,-1:12,18,335:6,67,335:3,-1:3,335,-1,335,-1" +
",335:2,-1:2,335:9,-1:4,335,-1:13,19,70:6,-1,70:3,-1:3,70:17,-1:3,70:4,-1:11" +
",22,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6" +
",67,335:3,-1:3,335,77,335,-1,335:2,-1:2,335:9,-1:4,335,-1:49,60,-1:4,78,-1:" +
"7,24,79:6,80,79:3,-1:3,79,-1,79,-1,79:2,-1:2,79:9,81,82,-1:2,79,83,-1:2,84," +
"-1:9,25,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:13,2" +
"6,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:15,87,-1:4" +
"6,24,79:6,80,79:3,-1:3,79,-1,79,-1,79:2,-1:2,79:9,81,82,-1:2,79,-1:3,84,-1:" +
"45,89,-1:12,24,81:6,-1,81:3,-1:3,81:18,-1:2,81:3,-1:2,84,-1:9,24,82:6,80,82" +
":3,-1:3,82,-1,82,-1,82:2,-1:2,82:9,81,-1:3,82,-1:3,84,-1:41,90,-1:3,187,-1:" +
"12,24,91:6,-1,91:3,-1:3,91:17,-1:3,91:3,-1:13,335:6,67,335:3,-1:3,335,93,33" +
"5,-1,335:2,-1:2,335:9,-1:4,335,-1:15,94,-1:3,95,-1:48,189,-1:9,96,-1:32,27," +
"335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:13,24,-1:30," +
"81,-1:4,237,-1:2,84,-1:45,98,-1:52,100,-1:8,28,335:6,67,335:3,-1:3,335,-1,3" +
"35,-1,335:2,-1:2,335:9,-1:4,335,-1:15,103,-1:62,104,-1:51,338,-1:57,107,-1:" +
"20,29,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:45,108" +
",-1:3,211,-1:44,90,-1:17,84:6,-1,84:3,-1:3,84:17,-1:3,84:3,-1:13,335,109:3," +
"335:2,67,109,335:2,-1:3,335,-1,335,-1,335:2,-1:2,335:4,109,335:2,109,335,-1" +
":4,335,110,-1:12,30,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4" +
",335,-1:19,112,-1:9,113,-1:49,114,-1:32,335:6,67,335:3,-1:3,335,190,335,-1," +
"335:2,-1:2,335:9,-1:4,335,-1:22,115,-1:41,116,-1:82,118,-1:13,335:6,67,335:" +
"3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:5,334,-1:48,334,-1:7,31,3" +
"35:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:32,120,-1:57," +
"121,-1:38,123,-1:53,192,-1:31,125,-1:42,24,-1:30,81,-1:7,84,-1:41,127,-1:3," +
"218,-1:44,108,-1:25,128,-1:41,195,-1:47,335:6,67,335:3,-1:3,335,129,335,-1," +
"335:2,-1:2,335:9,-1:4,335,-1:32,212,-1:35,130,-1:9,131,-1:46,132,-1:40,213," +
"-1:78,135,-1:35,197,-1:27,139,-1:65,141,-1:57,142,-1:20,32,-1:48,33,-1:54,1" +
"99,-1:42,24,-1:6,80,-1:23,81,-1:4,198,-1:2,84,-1:41,127,-1:16,34,335:6,67,3" +
"35:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:27,145,-1:40,146,-1:9," +
"147,-1:42,148,-1:47,149,-1:41,150,-1:46,35,-1:48,36,-1:48,37,-1:67,155,-1:5" +
"7,202,-1:40,156,203,-1:50,201,-1:31,157,-1:44,158,-1:46,38,-1:48,24,-1:6,80" +
",-1:23,81,-1:7,84,-1:9,39,-1:57,159,-1:43,161,-1:58,164,-1:34,40,-1:71,204," +
"-1:31,165,-1:47,166,-1:47,167,-1:46,168,-1:46,41,-1:62,170,-1:40,171,-1:52," +
"172,-1:38,42,-1:50,175,-1:46,43,-1:48,44,-1:48,45,-1:48,46,-1:48,47,-1:48,4" +
"8,-1:48,49,-1:44,1,-1:48,1,50:3,51,50:41,52,50,-1,1,53:3,54,53:13,55,53:8,5" +
"6,53:18,57,53,-1:6,6:6,-1,6:3,-1:3,6:14,59,6:2,-1:3,6:4,-1:12,335:6,67,335:" +
"3,-1:3,335,-1,335,-1,335:2,-1:2,69,335:8,-1:4,335,-1:14,335,217:3,335,208,6" +
"7,217,335:2,-1:3,335,-1,335,-1,335:2,-1:2,335,299,335:2,68,335:2,217,335,-1" +
":4,335,328,-1:14,110:3,-1:3,110,-1:17,110,-1:2,110,-1:6,110,-1:43,74,-1:18," +
"335,101:3,335:2,67,101,335:2,-1:3,335,-1,335,-1,335:2,-1:2,335:4,101,335:2," +
"101,335,-1:4,335,183,-1:13,335:6,67,335:3,-1:3,335,86,335,-1,335:2,-1:2,335" +
":9,-1:4,335,-1:45,90,-1:3,99,-1:12,24,-1:30,81,-1:4,117,-1:2,84,-1:28,106,-" +
"1:31,124,-1:69,126,-1:31,196,-1:44,134,-1:60,133,-1:40,138,-1:44,143,-1:52," +
"200,-1:42,24,-1:6,80,-1:23,81,-1:4,153,-1:2,84,-1:23,152,-1:36,154,-1:52,16" +
"3,-1:44,160,-1:55,162,-1:45,169,-1:48,173,-1:52,174,-1:39,6:6,-1,6:3,-1:3,6" +
":11,62,6:5,-1:3,6:4,-1:12,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,71,3" +
"35:8,-1:4,335,-1:14,335,236,217:2,335:2,67,217,335:2,-1:3,335,-1,335,-1,335" +
":2,-1:2,335:4,217,335:2,217,335,-1:4,335,328,-1:14,176:3,-1:3,176,-1:17,176" +
",-1:2,176,-1:6,176,-1:44,108,-1:3,119,-1:26,140,-1:36,144,-1:52,151,-1:43,6" +
":5,64,-1,6:3,-1:3,6:17,-1:3,6:4,-1:12,335:6,67,303,335:2,-1:3,72,-1,335,-1," +
"335:2,-1:2,335:9,-1:4,335,-1:14,335,285:3,335:2,67,285,335:2,-1:3,335,-1,33" +
"5,-1,335:2,-1:2,335:4,285,335:2,285,335,-1:4,335,308,-1:44,127,-1:3,136,-1:" +
"13,335:6,67,335:2,75,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335" +
":6,67,335:3,-1:3,186,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335" +
":3,-1:3,335,-1,335,-1,335:2,-1:2,335:3,76,335:5,-1:4,335,-1:14,335,85,335:4" +
",67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335:3" +
",-1:3,335,-1,335,-1,335:2,-1:2,88,335:8,-1:4,335,-1:14,310,335:5,67,335:3,-" +
"1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:4,92,335,67,335:3,-1:" +
"3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:5,97,67,335:3,-1:3,335," +
"-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335:3,-1:3,102,-1,335,-1" +
",335:2,-1:2,335:9,-1:4,335,-1:14,105,335:5,67,335:3,-1:3,335,-1,335,-1,335:" +
"2,-1:2,335:9,-1:4,335,-1:14,335,111,335:4,67,335:3,-1:3,335,-1,335,-1,335:2" +
",-1:2,335:9,-1:4,335,-1:14,335,122,335:4,67,335:3,-1:3,335,-1,335,-1,335:2," +
"-1:2,335:9,-1:4,335,-1:14,335,137,335:4,67,335:3,-1:3,335,-1,335,-1,335:2,-" +
"1:2,335:9,-1:4,335,-1:14,6:4,180,6,-1,6:3,-1:3,6:17,-1:3,6:4,-1:12,335:6,67" +
",335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:6,216,335:2,-1:4,335,-1:14,335,217" +
":3,335:2,67,217,251,335,-1:3,335,-1,335,-1,335:2,-1:2,335:4,217,335:2,217,3" +
"35,-1:4,335,328,-1:14,183:3,-1:3,183,-1:17,183,-1:2,183,-1:6,183,-1:13,335," +
"285:3,335:2,67,285,335:2,-1:3,255,-1,335,-1,335:2,-1:2,335:4,285,335:2,285," +
"335,-1:4,335,308,-1:12,24,-1:30,81,-1:4,188,-1:2,84,-1:18,191,-1:67,193,-1:" +
"26,194,-1:65,214,-1:30,205,-1:47,206,-1:63,238,-1:38,243,-1:40,6:6,-1,6:3,-" +
"1:3,6:14,207,6:2,-1:3,6:4,-1:12,335,294,335:4,67,335:3,-1:3,335,-1,335,-1,3" +
"35:2,-1:2,335:9,-1:4,335,-1:15,210:3,-1:3,210,-1:17,210,-1:2,210,-1:6,210,-" +
"1:13,335,185:3,335:2,67,185,335:2,-1:3,335,-1,335,-1,335:2,-1:2,335:4,185,3" +
"35:2,185,335,-1:4,335,235,-1:13,6:6,-1,6:3,-1:3,6:11,215,6:5,-1:3,6:4,-1:12" +
",335:3,219,335:2,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:1" +
"4,335:5,220,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:3,221,335:5,-1:4,335" +
",-1:14,335:4,222,335,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335," +
"-1:14,335:6,67,335,223,335,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:" +
"14,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:4,224,335:4,-1:4,335,-1" +
":14,335,225,335:4,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:" +
"14,335:4,226,335,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:1" +
"4,335:5,227,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335" +
":5,228,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:5,22" +
"9,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,230," +
"335:2,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335:3,-1:" +
"3,335,-1,335,-1,335:2,-1:2,335:5,231,335:3,-1:4,335,-1:14,6:2,250,6:3,-1,6:" +
"3,-1:3,6:17,-1:3,6:4,-1:12,335,252,335:4,67,335:3,-1:3,335,-1,335,-1,335:2," +
"-1:2,335:9,-1:4,335,-1:15,235:3,-1:3,235,-1:17,235,-1:2,235,-1:6,235,-1:13," +
"335,249:3,335:2,67,249,335:2,-1:3,335,-1,335,-1,335:2,-1:2,335:4,249,335:2," +
"249,335,-1:4,335,265,-1:18,244,-1:9,288,-1:38,290,-1:9,239,-1:34,240,-1:55," +
"241,-1:59,272,245,-1:31,242,-1:45,335:6,67,335,253,335,-1:3,335,-1,335,-1,3" +
"35:2,-1:2,335:9,-1:4,335,-1:15,248:3,-1:3,248,-1:17,248,-1:2,248,-1:6,248,-" +
"1:13,335:6,67,335:3,-1:3,254,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:" +
"6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:2,256,335:6,-1:4,335,-1:14,335" +
",257,335:4,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335," +
"258,335:4,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6" +
",67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:8,259,-1:4,335,-1:14,335:6,67,3" +
"35:3,-1:3,335,-1,335,-1,335:2,-1:2,335,260,335:7,-1:4,335,-1:14,335:6,67,33" +
"5:3,-1:3,335,-1,335,-1,335:2,-1:2,335:8,261,-1:4,335,-1:14,335:3,262,335:2," +
"67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335:3," +
"-1:3,273,-1,335,-1,335:2,-1:2,335:6,319,335:2,-1:4,335,-1:15,265:3,-1:3,265" +
",-1:17,265,-1:2,265,-1:6,265,-1:13,335,266:3,335:2,67,266,335:2,-1:3,335,-1" +
",335,-1,335:2,-1:2,335:4,266,335:2,266,335,-1:4,335,284,-1:14,267,-1:48,268" +
",-1:74,269,-1:61,336,-1:26,270,-1:39,271,-1:40,289:3,-1:3,289,-1:17,289,-1:" +
"2,289,-1:6,289,-1:26,291,-1:35,335:6,67,335:3,-1:3,309,-1,335,-1,335:2,-1:2" +
",335:9,-1:4,335,-1:15,292:3,-1:3,292,-1:17,292,-1:2,292,-1:6,292,-1:14,295:" +
"3,-1:3,295,-1:17,295,-1:2,295,-1:6,295,-1:13,335:6,67,335,275,335,-1:3,335," +
"-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:15,296:3,-1:3,296,-1:17,296,-1:2,296" +
",-1:6,296,-1:13,335:5,276,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4" +
",335,-1:15,274:3,-1:3,274,-1:17,274,-1:2,274,-1:6,274,-1:13,335:3,277,335:2" +
",67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335:3" +
",-1:3,335,-1,335,-1,335:2,-1:2,335:6,278,335:2,-1:4,335,-1:14,335:6,67,335:" +
"3,-1:3,335,-1,335,-1,335:2,-1:2,335:3,279,335:5,-1:4,335,-1:14,335:6,67,335" +
",280,335,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:4,281,335,6" +
"7,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335,282,335:4,67" +
",335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:2,301,335:3,6" +
"7,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:15,284:3,-1:3,284,-" +
"1:17,284,-1:2,284,-1:6,284,-1:13,335:6,67,335:3,-1:3,335,286,335,-1,335:2,-" +
"1:2,335:9,-1:4,335,-1:14,335:6,67,335:3,-1:3,335,287,335,-1,335:2,-1:2,335:" +
"9,-1:4,335,-1:54,298,-1:26,293,-1:31,311:3,-1:3,311,-1:17,311,-1:2,311,-1:6" +
",311,-1:14,313:3,-1:3,313,-1:17,313,-1:2,313,-1:6,313,-1:14,314:3,-1:3,314," +
"-1:17,314,-1:2,314,-1:6,314,-1:14,315:3,-1:3,315,-1:17,315,-1:2,315,-1:6,31" +
"5,-1:13,335:5,321,67,335:3,-1:3,335,-1,302,-1,335:2,-1:2,335:9,-1:4,335,-1:" +
"15,300:3,-1:3,300,-1:17,300,-1:2,300,-1:6,300,-1:13,335:6,67,322,335:2,-1:3" +
",335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335:3,-1:3,335,-1,3" +
"35,-1,335:2,-1:2,335,323,335:7,-1:4,335,-1:14,335:6,67,335:3,-1:3,335,-1,33" +
"5,-1,335,304,-1:2,335:9,-1:4,335,-1:14,335:5,324,67,335:3,-1:3,335,-1,335,-" +
"1,335:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335,325,335,-1:3,335,-1,335,-1,3" +
"35:2,-1:2,335:9,-1:4,335,-1:14,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2" +
",335:4,305,335:4,-1:4,335,-1:14,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:" +
"2,335:2,326,335:6,-1:4,335,-1:14,335:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1" +
":2,335:3,306,335:5,-1:4,335,-1:14,335,317,335:4,67,335:3,-1:3,335,-1,335,-1" +
",335:2,-1:2,335:9,-1:4,335,-1:15,308:3,-1:3,308,-1:17,308,-1:2,308,-1:6,308" +
",-1:53,316,-1:25,312,-1:32,329:3,-1:3,329,-1:17,329,-1:2,329,-1:6,329,-1:14" +
",331:3,-1:3,331,-1:17,331,-1:2,331,-1:6,331,-1:14,332:3,-1:3,332,-1:17,332," +
"-1:2,332,-1:6,332,-1:14,333:3,-1:3,333,-1:17,333,-1:2,333,-1:6,333,-1:13,33" +
"5:6,67,335:3,-1:3,335,-1,335,-1,335:2,-1:2,335:9,-1:4,335,-1:15,343:3,-1:3," +
"343,-1:17,343,-1:2,343,-1:6,343,-1:14,318:3,-1:3,318,-1:17,318,-1:2,318,-1:" +
"6,318,-1:29,330,-1:33,337:3,-1:3,337,-1:17,337,-1:2,337,-1:6,337,-1:14,339:" +
"3,-1:3,339,-1:17,339,-1:2,339,-1:6,339,-1:14,340:3,-1:3,340,-1:17,340,-1:2," +
"340,-1:6,340,-1:14,341:3,-1:3,341,-1:17,341,-1:2,341,-1:6,341,-1:14,342:3,-" +
"1:3,342,-1:17,342,-1:2,342,-1:6,342,-1:8");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
				return null;
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return new Symbol(sym._SYMB_0); }
					case -3:
						break;
					case 3:
						{ return new Symbol(sym._SYMB_1); }
					case -4:
						break;
					case 4:
						{ return new Symbol(sym._SYMB_2); }
					case -5:
						break;
					case 5:
						{ yybegin(STRING); }
					case -6:
						break;
					case 6:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -7:
						break;
					case 7:
						{ return new Symbol(sym._SYMB_4); }
					case -8:
						break;
					case 8:
						{ return new Symbol(sym._SYMB_6); }
					case -9:
						break;
					case 9:
						{ return new Symbol(sym._SYMB_7); }
					case -10:
						break;
					case 10:
						{ return new Symbol(sym._SYMB_8); }
					case -11:
						break;
					case 11:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -12:
						break;
					case 12:
						{ return new Symbol(sym._SYMB_33); }
					case -13:
						break;
					case 13:
						{ return new Symbol(sym._SYMB_34); }
					case -14:
						break;
					case 14:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -15:
						break;
					case 15:
						{ return new Symbol(sym.Wild, yytext().intern()); }
					case -16:
						break;
					case 16:
						{ /* ignore white space. */ }
					case -17:
						break;
					case 17:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -18:
						break;
					case 18:
						{ return new Symbol(sym._SYMB_31); }
					case -19:
						break;
					case 19:
						{ return new Symbol(sym.VarUIdent, yytext().intern()); }
					case -20:
						break;
					case 20:
						{ return new Symbol(sym._SYMB_37); }
					case -21:
						break;
					case 21:
						{ return new Symbol(sym._SYMB_36); }
					case -22:
						break;
					case 22:
						{ return new Symbol(sym._SYMB_13); }
					case -23:
						break;
					case 23:
						{ return new Symbol(sym._SYMB_35); }
					case -24:
						break;
					case 24:
						{ return new Symbol(sym.PrimURI, yytext().intern()); }
					case -25:
						break;
					case 25:
						{ return new Symbol(sym._SYMB_5); }
					case -26:
						break;
					case 26:
						{ return new Symbol(sym._SYMB_15); }
					case -27:
						break;
					case 27:
						{ return new Symbol(sym._SYMB_32); }
					case -28:
						break;
					case 28:
						{ return new Symbol(sym._SYMB_14); }
					case -29:
						break;
					case 29:
						{ return new Symbol(sym._SYMB_3); }
					case -30:
						break;
					case 30:
						{ return new Symbol(sym._SYMB_18); }
					case -31:
						break;
					case 31:
						{ return new Symbol(sym._SYMB_17); }
					case -32:
						break;
					case 32:
						{ return new Symbol(sym._SYMB_22); }
					case -33:
						break;
					case 33:
						{ return new Symbol(sym._SYMB_19); }
					case -34:
						break;
					case 34:
						{ return new Symbol(sym._SYMB_16); }
					case -35:
						break;
					case 35:
						{ return new Symbol(sym._SYMB_28); }
					case -36:
						break;
					case 36:
						{ return new Symbol(sym._SYMB_25); }
					case -37:
						break;
					case 37:
						{ return new Symbol(sym._SYMB_23); }
					case -38:
						break;
					case 38:
						{ return new Symbol(sym._SYMB_20); }
					case -39:
						break;
					case 39:
						{ return new Symbol(sym._SYMB_29); }
					case -40:
						break;
					case 40:
						{ return new Symbol(sym._SYMB_26); }
					case -41:
						break;
					case 41:
						{ return new Symbol(sym._SYMB_24); }
					case -42:
						break;
					case 42:
						{ return new Symbol(sym._SYMB_30); }
					case -43:
						break;
					case 43:
						{ return new Symbol(sym._SYMB_21); }
					case -44:
						break;
					case 44:
						{ return new Symbol(sym._SYMB_9); }
					case -45:
						break;
					case 45:
						{ return new Symbol(sym._SYMB_11); }
					case -46:
						break;
					case 46:
						{ return new Symbol(sym._SYMB_10); }
					case -47:
						break;
					case 47:
						{ return new Symbol(sym._SYMB_12); }
					case -48:
						break;
					case 48:
						{ return new Symbol(sym._SYMB_27); }
					case -49:
						break;
					case 49:
						{ return new Symbol(sym.PrimUUID, yytext().intern()); }
					case -50:
						break;
					case 50:
						{ pstring += yytext(); }
					case -51:
						break;
					case 51:
						{ String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return new Symbol(sym._STRING_, foo.intern()); }
					case -52:
						break;
					case 52:
						{ yybegin(ESCAPED); }
					case -53:
						break;
					case 53:
						{ pstring += yytext(); yybegin(STRING); }
					case -54:
						break;
					case 54:
						{ pstring += "\""; yybegin(STRING); }
					case -55:
						break;
					case 55:
						{ pstring += "\t"; yybegin(STRING); }
					case -56:
						break;
					case 56:
						{ pstring +=  "\n"; yybegin(STRING); }
					case -57:
						break;
					case 57:
						{ pstring += "\\"; yybegin(STRING); }
					case -58:
						break;
					case 59:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -59:
						break;
					case 60:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -60:
						break;
					case 62:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -61:
						break;
					case 64:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -62:
						break;
					case 180:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -63:
						break;
					case 207:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -64:
						break;
					case 215:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -65:
						break;
					case 232:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -66:
						break;
					case 246:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -67:
						break;
					case 250:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -68:
						break;
					case 263:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -69:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
