// -*- Java -*- This Cup file was machine-generated by BNFC
package com.biosimilarity.lift.lib.term.Prolog;

parser code {:
  public com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate pPredicate() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate Predicate;
nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.Term Term;
nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom Atom;
nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.Functor Functor;
nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.Boole Boole;
nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.Var Var;
nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst Lyst;
nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.ListPredicate ListPredicate;
nonterminal com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm ListTerm;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   '
terminal _SYMB_3;    //   [
terminal _SYMB_4;    //   ]
terminal _SYMB_5;    //   |
terminal _SYMB_6;    //   ,
terminal _SYMB_7;    //   false
terminal _SYMB_8;    //   true

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;

terminal String UIdent;
terminal String LIdent;
terminal String Wild;


start with Predicate;


Predicate ::= Atom:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.APred(p_1); :} 
  | Functor:p_1 _SYMB_0 ListTerm:p_3 _SYMB_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.CPred(p_1,p_3); :}
;
Term ::= Atom:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.TAtom(p_1); :} 
  | Var:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.VarT(p_1); :}
  | Functor:p_1 _SYMB_0 ListTerm:p_3 _SYMB_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Complex(p_1,p_3); :}
  | Lyst:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.TList(p_1); :}
;
Atom ::= LIdent:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Atm(p_1); :} 
  | _SYMB_2 _IDENT_:p_2 _SYMB_2  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.EAtm(p_2); :}
  | Boole:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.BAtm(p_1); :}
  | _STRING_:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.StrAtm(p_1); :}
  | _INTEGER_:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.IntAtm(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.FltAtm(p_1); :}
;
Functor ::= LIdent:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.FAtm(p_1); :} 
;
Boole ::= _SYMB_8  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Verity(); :} 
  | _SYMB_7  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Absurdity(); :}
;
Var ::= UIdent:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.V(p_1); :} 
  | Wild:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.A(p_1); :}
;
Lyst ::= _SYMB_3 _SYMB_4  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Empty(); :} 
  | _SYMB_3 ListTerm:p_2 _SYMB_4  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Enum(p_2); :}
  | _SYMB_3 ListTerm:p_2 _SYMB_5 Lyst:p_4 _SYMB_4  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Cons(p_2,p_4); :}
  | _SYMB_3 ListTerm:p_2 _SYMB_5 Var:p_4 _SYMB_4  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.ConsV(p_2,p_4); :}
;
ListPredicate ::= Predicate:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.ListPredicate(); RESULT.addLast(p_1); :} 
  | Predicate:p_1 _SYMB_6 ListPredicate:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListTerm ::= Term:p_1  {: RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm(); RESULT.addLast(p_1); :} 
  | Term:p_1 _SYMB_6 ListTerm:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

